import crafttweaker.world.IFacing;
import crafttweaker.block.IBlock;
import crafttweaker.block.IBlockState;
import crafttweaker.item.IIngredient;
import crafttweaker.item.IItemStack;
import mods.gregtech.multiblock.Builder;
import mods.gregtech.multiblock.FactoryBlockPattern;
import mods.gregtech.multiblock.IBlockMatcher;
import mods.gregtech.multiblock.MultiblockAbility;
import mods.gregtech.multiblock.RelativeDirection;
import mods.gregtech.multiblock.FactoryMultiblockShapeInfo;
import mods.gregtech.multiblock.IBlockInfo;
import mods.gregtech.multiblock.IBlockWorldState;
import mods.gregtech.multiblock.Multiblock;
import mods.gregtech.recipe.RecipeMap;
import mods.gregtech.MetaTileEntities;
import mods.gregtech.recipe.FactoryRecipeMap;
import mods.gregtech.render.ITextureArea;
import mods.gregtech.render.MoveType;
import mods.gregtech.render.ICubeRenderer;
import mods.gregtech.render.Textures;
import crafttweaker.oredict.IOreDict;
import crafttweaker.oredict.IOreDictEntry;


var loc = "intelligent_multi_tank";
var meta = 10036;
val intelligent_multi_tank = Builder.start(loc, meta)
    .withPattern(
            FactoryBlockPattern.start(RelativeDirection.RIGHT, RelativeDirection.BACK, RelativeDirection.UP)
                .aisle(
                    "~~~~~CCCCC~~~~~",
                    "~~~CCCCCCCCC~~~",
                    "~~CCCCCCCCCCC~~",
                    "~CCCCCCCCCCCCC~",
                    "~CCCCCCCCCCCCC~",
                    "CCCCCCCCCCCCCCC",
                    "CCCCCCCCCCCCCCC",
                    "CCCCCCCCCCCCCCC",
                    "CCCCCCCCCCCCCCC",
                    "CCCCCCCCCCCCCCC",
                    "~CCCCCCCCCCCCC~",
                    "~CCCCCCCCCCCCC~",
                    "~~CCCCCCCCCCC~~",
                    "~~~CCCCCCCCC~~~",
                    "~~~~~CCCCC~~~~~")
                .aisle(
                    "~~~~~~~A~~~~~~~",
                    "~~~~~~AAA~~~~~~",
                    "~~~A~~~A~~~A~~~",
                    "~~AAA~~~~~AAA~~",
                    "~~~A~~~~~~~A~~~",
                    "~~~~~~AAA~~~~~~",
                    "~A~~~AAAAA~~~A~",
                    "AAA~~AAAAA~~AAA",
                    "~A~~~AAAAA~~~A~",
                    "~~~~~~ASA~~~~~~",
                    "~~~A~~~~~~~A~~~",
                    "~~AAA~~~~~AAA~~",
                    "~~~A~~~A~~~A~~~",
                    "~~~~~~AAA~~~~~~",
                    "~~~~~~~A~~~~~~~")
                .aisle(
                    "~~~~~~~G~~~~~~~",
                    "~~~~~~GLG~~~~~~",
                    "~~~G~~~G~~~G~~~",
                    "~~GLG~~~~~GLG~~",
                    "~~~G~~~~~~~G~~~",
                    "~~~~~~~~~~~~~~~",
                    "~G~~~~GGG~~~~G~",
                    "GLG~~~GLG~~~GLG",
                    "~G~~~~GGG~~~~G~",
                    "~~~~~~~~~~~~~~~",
                    "~~~G~~~~~~~G~~~",
                    "~~GLG~~~~~GLG~~",
                    "~~~G~~~G~~~G~~~",
                    "~~~~~~GLG~~~~~~",
                    "~~~~~~~G~~~~~~~")
                .aisle(
                    "~~~~~~~G~~~~~~~",
                    "~~~~~~GLG~~~~~~",
                    "~~~G~~~G~~~G~~~",
                    "~~GLG~~~~~GLG~~",
                    "~~~G~~~~~~~G~~~",
                    "~~~~~~~~~~~~~~~",
                    "~G~~~~GGG~~~~G~",
                    "GLG~~~GLG~~~GLG",
                    "~G~~~~GGG~~~~G~",
                    "~~~~~~~~~~~~~~~",
                    "~~~G~~~~~~~G~~~",
                    "~~GLG~~~~~GLG~~",
                    "~~~G~~~G~~~G~~~",
                    "~~~~~~GLG~~~~~~",
                    "~~~~~~~G~~~~~~~")
                .aisle(
                    "~~~~~~~G~~~~~~~",
                    "~~~~~~GLG~~~~~~",
                    "~~~G~~~G~~~G~~~",
                    "~~GLG~~~~~GLG~~",
                    "~~~G~~~~~~~G~~~",
                    "~~~~~~~~~~~~~~~",
                    "~G~~~~GGG~~~~G~",
                    "GLG~~~GLG~~~GLG",
                    "~G~~~~GGG~~~~G~",
                    "~~~~~~~~~~~~~~~",
                    "~~~G~~~~~~~G~~~",
                    "~~GLG~~~~~GLG~~",
                    "~~~G~~~G~~~G~~~",
                    "~~~~~~GLG~~~~~~",
                    "~~~~~~~G~~~~~~~")
                .aisle(
                    "~~~~~~~G~~~~~~~",
                    "~~~~~~GLG~~~~~~",
                    "~~~G~~~G~~~G~~~",
                    "~~GLG~~~~~GLG~~",
                    "~~~G~~~~~~~G~~~",
                    "~~~~~~~~~~~~~~~",
                    "~G~~~~GGG~~~~G~",
                    "GLG~~~GLG~~~GLG",
                    "~G~~~~GGG~~~~G~",
                    "~~~~~~~~~~~~~~~",
                    "~~~G~~~~~~~G~~~",
                    "~~GLG~~~~~GLG~~",
                    "~~~G~~~G~~~G~~~",
                    "~~~~~~GLG~~~~~~",
                    "~~~~~~~G~~~~~~~")
                .aisle(
                    "~~~~~~~A~~~~~~~",
                    "~~~~~~AAA~~~~~~",
                    "~~~A~~~A~~~A~~~",
                    "~~AAA~~~~~AAA~~",
                    "~~~A~~~~~~~A~~~",
                    "~~~~~~AAA~~~~~~",
                    "~A~~~AAAAA~~~A~",
                    "AAA~~AAAAA~~AAA",
                    "~A~~~AAAAA~~~A~",
                    "~~~~~~AAA~~~~~~",
                    "~~~A~~~~~~~A~~~",
                    "~~AAA~~~~~AAA~~",
                    "~~~A~~~A~~~A~~~",
                    "~~~~~~AAA~~~~~~",
                    "~~~~~~~A~~~~~~~")
                .aisle(
                    "~~~~~CCCCC~~~~~",
                    "~~~CCCCCCCCC~~~",
                    "~~CCCCCCCCCCC~~",
                    "~CCCCCCCCCCCCC~",
                    "~CCCCCCCCCCCCC~",
                    "CCCCCCCCCCCCCCC",
                    "CCCCCCCCCCCCCCC",
                    "CCCCCCCCCCCCCCC",
                    "CCCCCCCCCCCCCCC",
                    "CCCCCCCCCCCCCCC",
                    "~CCCCCCCCCCCCC~",
                    "~CCCCCCCCCCCCC~",
                    "~~CCCCCCCCCCC~~",
                    "~~~CCCCCCCCC~~~",
                    "~~~~~CCCCC~~~~~")

                .where("S", IBlockMatcher.controller(loc))
                .where("~", IBlockMatcher.ANY)
                .whereOr("A", 
                <metastate:contenttweaker:advcomputercasing>,
                    IBlockMatcher.abilityPartPredicate(
                        MultiblockAbility.IMPORT_FLUIDS,
                        MultiblockAbility.IMPORT_ITEMS,
                        MultiblockAbility.INPUT_ENERGY,
                        MultiblockAbility.EXPORT_FLUIDS,
                        MultiblockAbility.EXPORT_ITEMS
                ))
                .where("L", <metastate:contenttweaker:lasercasing>)
                .where("C", <metastate:contenttweaker:computercasing>)
                .where("G", <metastate:gtadditions:ga_transparent_casing:5>)
                .build())
        .addDesign(
                FactoryMultiblockShapeInfo.start()
                .aisle(
                    "     CCCCC     ",
                    "       A       ",
                    "       G       ",
                    "       G       ",
                    "       G       ",
                    "       G       ",
                    "       A       ",
                    "     CCCCC     ")
                .aisle(
                    "   CCCCCCCCC   ",
                    "   A  AAA  A   ",
                    "   G  GLG  G   ",
                    "   G  GLG  G   ",
                    "   G  GLG  G   ",
                    "   G  GLG  G   ",
                    "   A  AAA  A   ",
                    "   CCCCCCCCC   ")
                .aisle(
                    "  CCCCCCCCCCC  ",
                    "  AAA  A  AAA  ",
                    "  GLG  G  GLG  ",
                    "  GLG  G  GLG  ",
                    "  GLG  G  GLG  ",
                    "  GLG  G  GLG  ",
                    "  AAA  A  AAA  ",
                    "  CCCCCCCCCCC  ")
                .aisle(
                    " CCCCCCCCCCCCC ",
                    "   A       A   ",
                    "   G       G   ",
                    "   G       G   ",
                    "   G       G   ",
                    "   G       G   ",
                    "   A       A   ",
                    " CCCCCCCCCCCCC ")
                .aisle(
                    " CCCCCCCCCCCCC ",
                    "               ",
                    "               ",
                    "               ",
                    "               ",
                    "               ",
                    "               ",
                    " CCCCCCCCCCCCC ")
                .aisle(
                    "CCCCCCCCCCCCCCC",
                    "      AAA      ",
                    "               ",
                    "               ",
                    "               ",
                    "               ",
                    "      AAA      ",
                    "CCCCCCCCCCCCCCC")
                .aisle(
                    "CCCCCCCCCCCCCCC",
                    " A   AAAAA   A ",
                    " G           G ",
                    " G           G ",
                    " G           G ",
                    " G           G ",
                    " A   AAAAA   A ",
                    "CCCCCCCCCCCCCCC")
                .aisle(
                    "CCCCCCCCCCCCCCC",
                    "AAA  SAAAE  AAA",
                    "GLG    L    GLG",
                    "GLG    L    GLG",
                    "GLG    L    GLG",
                    "GLG    L    GLG",
                    "AAA  AAAAA  AAA",
                    "CCCCCCCCCCCCCCC")
                .aisle(
                    "CCCCCCCCCCCCCCC",
                    " A   AAAAA   A ",
                    " G           G ",
                    " G           G ",
                    " G           G ",
                    " G           G ",
                    " A   AAAAA   A ",
                    "CCCCCCCCCCCCCCC")
                .aisle(
                    "CCCCCCCCCCCCCCC",
                    "      AAA      ",
                    "               ",
                    "               ",
                    "               ",
                    "               ",
                    "      AAA      ",
                    " CCCCCCCCCCCCC ")
                .aisle(
                    " CCCCCCCCCCCCC ",
                    "               ",
                    "               ",
                    "               ",
                    "               ",
                    "               ",
                    "               ",
                    " CCCCCCCCCCCCC ")
                .aisle(
                    " CCCCCCCCCCCCC ",
                    "   A       A   ",
                    "   G       G   ",
                    "   G       G   ",
                    "   G       G   ",
                    "   G       G   ",
                    "   A       A   ",
                    " CCCCCCCCCCCCC ")
                .aisle(
                    "  CCCCCCCCCCC  ",
                    "  AAA  A  AAA  ",
                    "  GLG  G  GLG  ",
                    "  GLG  G  GLG  ",
                    "  GLG  G  GLG  ",
                    "  GLG  G  GLG  ",
                    "  AAA  A  AAA  ",
                    "  CCCCCCCCCCC  ")
                .aisle(
                    "   CCCCCCCCC   ",
                    "   A  AAA  A   ",
                    "   G  GLG  G   ",
                    "   G  GLG  G   ",
                    "   G  GLG  G   ",
                    "   G  GLG  G   ",
                    "   A  AAA  A   ",
                    "   CCCCCCCCC   ")
                .aisle(
                    "     CCCCC     ",
                    "       A       ",
                    "       G       ",
                    "       G       ",
                    "       G       ",
                    "       G       ",
                    "       A       ",
                    "     CCCCC     ")
                .where("L", <metastate:contenttweaker:lasercasing>)
                .where("C", <metastate:contenttweaker:computercasing>)
                .where("G", <metastate:gtadditions:ga_transparent_casing:5>)
                .where("S", IBlockInfo.controller(loc))
                .where("A", <metastate:contenttweaker:advcomputercasing>)
                .where("E", MetaTileEntities.ENERGY_INPUT_HATCH[4], IFacing.east())
                .build())
.withRecipeMap(
        FactoryRecipeMap.start(loc)
                        .maxInputs(1)
                        .maxFluidInputs(1)
                        .maxFluidOutputs(1)
                        .maxOutputs(1)
                        .build())
.withTexture(ICubeRenderer.sided("contenttweaker:blocks/advcomputercasing"))
.withZoom(0.5f)

.buildAndRegister() as Multiblock;

RecipeBuilder.newBuilder("qft1", "qft", 100)   .addEnergyPerTickInput(8000)  .addItemInput(<contenttweaker:sgm_catalyst>).setChance(0)    .addFluidInputs(<liquid:ammonia>*4000,<liquid:nitric_acid>*2000,<liquid:oxygen>*2000) .addItemInputs(<minecraft:sugar>*4,<gregtech:meta_item_1:2996>*8)   .addItemOutput(<gtadditions:ga_meta_item:32018>*256)   .addFluidOutputs(<liquid:b27_supplement>*200000,<liquid:raw_growth_medium>*10000,<liquid:sterilized_growth_medium>*5000) .build();
RecipeBuilder.newBuilder("qft2", "qft", 100)   .addEnergyPerTickInput(8000)  .addItemInput(<contenttweaker:pgm_catalyst>).setChance(0)    .addItemInput(<gregtech:meta_item_1:2900>*32)   .addItemOutputs(<gregtech:meta_item_1:2051>*32,<gregtech:meta_item_1:2047>*32,<gregtech:meta_item_1:2883>*32,<gregtech:meta_item_1:2032>*32,<gregtech:meta_item_1:2049>*32,<gregtech:meta_item_1:2869>*32) .build();
RecipeBuilder.newBuilder("qft3", "qft", 100)   .addEnergyPerTickInput(12000)  .addItemInput(<contenttweaker:ngm_catalyst>).setChance(0) .addItemInput(<gregtech:meta_item_1:2746>*32)   .addItemOutputs(<gregtech:meta_item_1:2307>*32,<gregtech:meta_item_1:2563>*32,<gregtech:meta_item_1:2309>*32,<gregtech:meta_item_1:2551>*32,<gregtech:meta_item_1:2310>*32) .build();
RecipeBuilder.newBuilder("qft4", "qft", 100)   .addEnergyPerTickInput(12000)  .addItemInput(<contenttweaker:ree_catalyst>).setChance(0) .addItemInput(<gregtech:meta_item_1:2281>*32)   .addItemOutputs(<gregtech:meta_item_1:2078>*32,<gregtech:meta_item_1:2014>*32,<gregtech:meta_item_1:2042>*32,<gregtech:meta_item_1:2055>*32,<gregtech:meta_item_1:2034>*32) .build();
RecipeBuilder.newBuilder("qft5", "qft", 100)   .addEnergyPerTickInput(12000)  .addItemInput(<contenttweaker:ree_catalyst>).setChance(0) .addItemInput(<gregtech:meta_item_1:2270>*32)   .addItemOutputs(<gregtech:meta_item_1:2027>*32,<gregtech:meta_item_1:2024>*32,<gregtech:meta_item_1:2059>*32,<gregtech:meta_item_1:2034>*32,<gregtech:meta_item_1:2068>*32,<gregtech:meta_item_1:2042>*32) .build();
RecipeBuilder.newBuilder("qft6", "qft", 100)   .addEnergyPerTickInput(12000)  .addItemInput(<contenttweaker:radox_catalyst>).setChance(0) .addItemInput(<gregtech:meta_item_1:2993>*32) .addFluidInput(<liquid:xenoxene>*100000) .addFluidOutputs(<liquid:radoxpolymer>*10000,<liquid:purifiedradox>*25000,<liquid:crackedheavyradox>*15000,<liquid:crackedlightradox>*15000).build();
RecipeBuilder.newBuilder("qft7", "qft", 100)   .addEnergyPerTickInput(12000)  .addItemInput(<contenttweaker:kevlar_catalyst>).setChance(0) .addItemInput(<gregtech:meta_item_1:2012>*32) .addFluidInputs(<liquid:nitrogen>*32000,<liquid:oxygen>*32000,<liquid:hydrogen>*32000) .addFluidOutputs(<liquid:reinforcedkevlar>*100,<liquid:kevlar>*500,<liquid:crystalkevlar>*2000,<liquid:unrefinedkevlar>*5000).build();
RecipeBuilder.newBuilder("qft8", "qft", 100)   .addEnergyPerTickInput(12000)  .addItemInput(<contenttweaker:plastic_catalyst>).setChance(0) .addItemInput(<gregtech:meta_item_1:2012>*64) .addFluidInputs(<liquid:chlorine>*64000,<liquid:nitrogen>*64000,<liquid:oxygen>*64000,<liquid:hydrogen>*64000) .addFluidOutputs(<liquid:styrene_butadiene_rubber>*16000,<liquid:silicon_rubber>*12800,<liquid:plastic>*50000,<liquid:polybenzimidazole>*2000,<liquid:polytetrafluoroethylene>*2000,<liquid:polyvinyl_chloride>*40000,<liquid:polycaprolactam>*12000).build();
RecipeBuilder.newBuilder("qft9", "qft", 100)   .addEnergyPerTickInput(12000)  .addItemInput(<contenttweaker:soldering_catalyst>).setChance(0) .addItemInputs(<gregtech:meta_item_1:2012>*32,<gregtech:meta_item_1:2008>*32) .addFluidInputs(<liquid:oxygen>*64000,<liquid:hydrogen>*64000) .addFluidOutputs(<liquid:indalloy140>*8000,<liquid:refinedglue>*20000,<liquid:soldering_alloy>*18000)  .build();
RecipeBuilder.newBuilder("qft10", "qft", 100)   .addEnergyPerTickInput(12000)  .addItemInput(<contenttweaker:metal_catalyst>).setChance(0) .addItemInputs(<gregtech:meta_item_1:2035>*32,<gregtech:meta_item_1:2123>*32,<gregtech:meta_item_1:2191>*32) .addItemOutputs(<gregtech:meta_item_1:2072>*16,<gregtech:meta_item_1:2074>*16,<gregtech:meta_item_1:2300>*16,<gregtech:meta_item_1:2031>*16)    .build();
